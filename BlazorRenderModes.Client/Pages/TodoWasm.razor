@page "/todo-wasm"
@page "/todo-wasm/{filter}"
@using BlazorRenderModes.Client.Models
@using BlazorRenderModes.Client.Constants
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject NavigationManager Navigation

@rendermode InteractiveWebAssembly

<PageTitle>TODO - WebAssembly</PageTitle>

<div class="row">
    <div class="col-md-8 mx-auto">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>TODO App</h1>
            <span class="badge bg-success fs-6">WebAssembly (Client-Side)</span>
        </div>
        
        <div class="alert alert-success">
            <i class="bi bi-cpu"></i>
            <strong>WebAssembly Mode:</strong> This page runs entirely on the client using WebAssembly. 
            All interactions are instant with no server round-trips for UI updates. Perfect for rich, interactive experiences.
        </div>

        @if (isLoading)
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <!-- Add New TODO Form -->
            <div class="mb-4">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Add New TODO</h6>
                    </div>
                    <div class="card-body">
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="newTodoTitle" @onkeypress="HandleKeyPress"
                                   placeholder="Enter a new todo..." required>
                            <button class="btn btn-primary" type="button" @onclick="AddTodo" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                }
                                Add TODO
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filter Navigation -->
            <div class="mb-3">
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn @(CurrentFilter == TodoFilters.All ? "btn-secondary" : "btn-outline-secondary")"
                            @onclick="() => SetFilter(TodoFilters.All)">
                        All (@(todos?.Count ?? 0))
                    </button>
                    <button type="button" class="btn @(CurrentFilter == TodoFilters.Active ? "btn-secondary" : "btn-outline-secondary")"
                            @onclick="() => SetFilter(TodoFilters.Active)">
                        Active (@(todos?.Count(t => !t.IsCompleted) ?? 0))
                    </button>
                    <button type="button" class="btn @(CurrentFilter == TodoFilters.Completed ? "btn-secondary" : "btn-outline-secondary")"
                            @onclick="() => SetFilter(TodoFilters.Completed)">
                        Completed (@(todos?.Count(t => t.IsCompleted) ?? 0))
                    </button>
                </div>
            </div>

            <!-- Todo List -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">TODO List (@(FilteredTodos.Count(i => !i.IsCompleted)) remaining)</h5>
                </div>
                <div class="card-body">
                    @if (FilteredTodos.Any())
                    {
                        @foreach (var item in FilteredTodos)
                        {
                            <div class="card mb-2">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" 
                                                   checked="@item.IsCompleted" 
                                                   @onchange="() => ToggleTodo(item.Id)"
                                                   disabled="@isToggling">
                                            <label class="form-check-label @(item.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                                                @item.Title
                                            </label>
                                        </div>
                                        <div class="d-flex align-items-center">
                                            <small class="text-muted me-2">@item.CreatedAt.ToString("MM/dd/yyyy")</small>
                                            <button class="btn btn-outline-danger btn-sm" type="button" 
                                                    @onclick="() => DeleteTodo(item.Id)" disabled="@isDeleting">
                                                @if (deletingId == item.Id && isDeleting)
                                                {
                                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-trash"></i>
                                                }
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="bi bi-check-circle display-4"></i>
                            <p class="mt-2">No todos @(CurrentFilter == TodoFilters.All ? "" : CurrentFilter) yet!</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Statistics -->
            <div class="mt-4">
                <h6>Statistics:</h6>
                <div class="row">
                    <div class="col-md-4">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-primary">@(todos?.Count ?? 0)</h5>
                                <p class="card-text">Total Items</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-warning">@(todos?.Count(t => !t.IsCompleted) ?? 0)</h5>
                                <p class="card-text">Pending</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-success">@(todos?.Count(t => t.IsCompleted) ?? 0)</h5>
                                <p class="card-text">Completed</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string? Filter { get; set; }
    
    private List<TodoItem>? todos;
    private string newTodoTitle = string.Empty;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isToggling = false;
    private bool isDeleting = false;
    private int deletingId = 0;

    private string CurrentFilter => string.IsNullOrEmpty(Filter) ? TodoFilters.All : Filter.ToLower();
    
    private List<TodoItem> FilteredTodos => CurrentFilter switch
    {
        TodoFilters.Active => todos?.Where(t => !t.IsCompleted).ToList() ?? [],
        TodoFilters.Completed => todos?.Where(t => t.IsCompleted).ToList() ?? [],
        _ => todos ?? []
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (todos == null)
        {
            await LoadTodos();
        }
    }

    private async Task LoadTodos()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            todos = await Http.GetFromJsonAsync<List<TodoItem>>("api/todo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading todos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AddTodo()
    {
        if (string.IsNullOrWhiteSpace(newTodoTitle) || isSubmitting)
            return;

        try
        {
            isSubmitting = true;
            StateHasChanged();

            var request = new { Title = newTodoTitle.Trim() };
            var json = JsonSerializer.Serialize(request);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            var response = await Http.PostAsync("api/todo", content);
            
            if (response.IsSuccessStatusCode)
            {
                newTodoTitle = string.Empty;
                await LoadTodos();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding todo: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task ToggleTodo(int id)
    {
        if (isToggling)
            return;

        try
        {
            isToggling = true;
            StateHasChanged();

            var response = await Http.PutAsync($"api/todo/{id}/toggle", null);
            
            if (response.IsSuccessStatusCode)
            {
                // Update local state immediately for better UX
                var todo = todos?.FirstOrDefault(t => t.Id == id);
                if (todo != null)
                {
                    todo.IsCompleted = !todo.IsCompleted;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling todo: {ex.Message}");
            // Reload on error to ensure consistency
            await LoadTodos();
        }
        finally
        {
            isToggling = false;
            StateHasChanged();
        }
    }

    private async Task DeleteTodo(int id)
    {
        if (isDeleting)
            return;

        try
        {
            deletingId = id;
            isDeleting = true;
            StateHasChanged();

            var response = await Http.DeleteAsync($"api/todo/{id}");
            
            if (response.IsSuccessStatusCode)
            {
                // Remove from local state immediately for better UX
                todos?.RemoveAll(t => t.Id == id);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting todo: {ex.Message}");
            // Reload on error to ensure consistency
            await LoadTodos();
        }
        finally
        {
            isDeleting = false;
            deletingId = 0;
            StateHasChanged();
        }
    }

    private void SetFilter(string filter)
    {
        var url = filter == TodoFilters.All ? "/todo-wasm" : $"/todo-wasm/{filter}";
        Navigation.NavigateTo(url);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddTodo();
        }
    }
}