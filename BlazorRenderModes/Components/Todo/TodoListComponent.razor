@using BlazorRenderModes.Client.Constants
@using BlazorRenderModes.Models

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">TODO List (@TodoItems.Count(i => !i.IsCompleted) remaining)</h5>
    </div>
    <div class="card-body">

        @if (TodoItems.Any())
        {
            <div class="mb-3">
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn @(CurrentFilter == TodoFilters.All ? "btn-secondary" : "btn-outline-secondary")" 
                            @onclick="() => HandleFilterChange(TodoFilters.All)">
                        All (@TodoItems.Count)
                    </button>
                    <button type="button" class="btn @(CurrentFilter == TodoFilters.Active ? "btn-secondary" : "btn-outline-secondary")" 
                            @onclick="() => HandleFilterChange(TodoFilters.Active)">
                        Active (@TodoItems.Count(i => !i.IsCompleted))
                    </button>
                    <button type="button" class="btn @(CurrentFilter == TodoFilters.Completed ? "btn-secondary" : "btn-outline-secondary")" 
                            @onclick="() => HandleFilterChange(TodoFilters.Completed)">
                        Completed (@TodoItems.Count(i => i.IsCompleted))
                    </button>
                </div>
            </div>

            @foreach (var item in FilteredTodos)
            {
                <TodoItemComponent Item="item" 
                                 OnToggleComplete="ToggleComplete" 
                                 OnDelete="DeleteTodo" />
            }
        }
        else
        {
            <div class="text-center text-muted py-4">
                <i class="bi bi-check-circle display-4"></i>
                <p class="mt-2">No todos @(CurrentFilter == TodoFilters.All ? "" : CurrentFilter) yet!</p>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<TodoItem> TodoItems { get; set; } = new();
    [Parameter] public string CurrentFilter { get; set; } = TodoFilters.All;
    [Parameter] public EventCallback<TodoItem> OnToggleTodo { get; set; }
    [Parameter] public EventCallback<TodoItem> OnDeleteTodo { get; set; }
    [Parameter] public EventCallback<string> OnFilterChange { get; set; }

    private IEnumerable<TodoItem> FilteredTodos => CurrentFilter.ToLower() switch
    {
        TodoFilters.Active => TodoItems.Where(t => !t.IsCompleted),
        TodoFilters.Completed => TodoItems.Where(t => t.IsCompleted),
        _ => TodoItems
    };

    private async Task HandleFilterChange(string filter)
    {
        if (OnFilterChange.HasDelegate)
        {
            await OnFilterChange.InvokeAsync(filter);
        }
    }

    private async Task ToggleComplete(TodoItem item)
    {
        item.IsCompleted = !item.IsCompleted;
        await OnToggleTodo.InvokeAsync(item);
    }

    private async Task DeleteTodo(TodoItem item)
    {
        await OnDeleteTodo.InvokeAsync(item);
    }
}